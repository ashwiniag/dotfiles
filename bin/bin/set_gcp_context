#!/bin/bash
# Script to set up GCP Kubernetes contexts for multiple projects/clusters

function show_usage {
  echo "Usage: $0 [OPTIONS]"
  echo "Options:"
  echo "  --projects PROJECTS    Comma-separated list of GCP project IDs"
  echo "  --env ENV              Environment name (e.g., staging, production)"
  echo "  --help                 Display this help message"
  echo ""
  echo "If no options are provided, the script will use the current gcloud configuration"
  echo "to determine projects and environment."
}

while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    --projects)
      PROJECTS="$2"
      shift 2
      ;;
    --env)
      ENV="$2"
      shift 2
      ;;
    --help)
      show_usage
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      show_usage
      exit 1
      ;;
  esac
done

# If projects not specified, determine environment based on current gcloud config
if [ -z "$PROJECTS" ]; then
  CURRENT_CONFIG=$(gcloud config list --format='value(core.project)')

  if gcloud config list | grep -i "staging\|dev\|test" > /dev/null; then
    ENV=${ENV:-"staging"}
    # Use current project if no projects specified
    PROJECTS=${PROJECTS:-$CURRENT_CONFIG}
  else
    ENV=${ENV:-"production"}
    # Use current project if no projects specified
    PROJECTS=${PROJECTS:-$CURRENT_CONFIG}
  fi
fi

echo "Setting up Kubernetes contexts for environment: $ENV"
echo "Projects: $PROJECTS"

# Set up kubeconfig in a standard location
KUBE_CONFIG_DIR="/etc/skel/.kube"
KUBE_CONFIG_FILE="$KUBE_CONFIG_DIR/config"

if [ -w /etc/skel ]; then
  # If we have write access to /etc/skel (typically requires sudo)
  sudo rm -f $KUBE_CONFIG_FILE
  sudo mkdir -p $KUBE_CONFIG_DIR && sudo touch $KUBE_CONFIG_FILE
  sudo chown root:root $KUBE_CONFIG_DIR
  sudo chmod 755 $KUBE_CONFIG_DIR
  sudo chown root:root $KUBE_CONFIG_FILE
  sudo chmod 644 $KUBE_CONFIG_FILE
  export KUBECONFIG=$KUBE_CONFIG_FILE
else
  # If we don't have write access, use a temporary file
  echo "No write access to /etc/skel, using local kubeconfig"
  KUBE_CONFIG_FILE="$(pwd)/kubeconfig_temp"
  rm -f $KUBE_CONFIG_FILE
  touch $KUBE_CONFIG_FILE
  export KUBECONFIG=$KUBE_CONFIG_FILE
fi

# Create temporary files for processing
CLUSTER_REGION_FILE="$(pwd)/cluster_region.txt"
RENAME_CONTEXT_FILE="$(pwd)/rename_context.txt"

# Remove any existing temporary files
rm -f $CLUSTER_REGION_FILE $RENAME_CONTEXT_FILE

# Process each project
for PROJECT in $(echo "$PROJECTS" | tr ',' '\n'); do
  echo "Processing project: $PROJECT"

  # List all clusters in the project
  gcloud container clusters list --format='get(name,location)' --project="$PROJECT" > $CLUSTER_REGION_FILE

  if [ ! -s $CLUSTER_REGION_FILE ]; then
    echo "No clusters found in project $PROJECT"
    continue
  fi

  # Process each cluster
  while read -r CLUSTER REGION; do
    echo "Getting credentials for cluster $CLUSTER in region $REGION..."
    gcloud container clusters get-credentials "$CLUSTER" --region "$REGION" --project="$PROJECT"

    # Extract cluster labels for better context naming
    CLUSTER_LABELS=$(gcloud container clusters describe $CLUSTER --region $REGION --project $PROJECT --format="value(resourceLabels.list())")

    # Create context naming pattern based on available labels
    CONTEXT_SUFFIX=""
    for LABEL in "env" "environment" "type" "tier" "cluster_type" "dvpc_id"; do
      LABEL_VALUE=$(echo "$CLUSTER_LABELS" | grep -o "$LABEL=[^,]*" | cut -d= -f2)
      if [ ! -z "$LABEL_VALUE" ]; then
        CONTEXT_SUFFIX="${CONTEXT_SUFFIX}-${LABEL_VALUE}"
      fi
    done

    # If no meaningful labels found, use region as suffix
    if [ -z "$CONTEXT_SUFFIX" ]; then
      CONTEXT_SUFFIX="-${REGION}"
    fi

    # Store the original and new context names
    echo "${PROJECT}_${REGION}_${CLUSTER} ${PROJECT}${CONTEXT_SUFFIX}" >> $RENAME_CONTEXT_FILE

  done < $CLUSTER_REGION_FILE
done

# Rename contexts to more user-friendly names
echo "Renaming contexts for easier access..."
while read -r CLUSTER_ID NEW_CONTEXT_NAME; do
  kubectl config rename-context gke_${CLUSTER_ID} ${NEW_CONTEXT_NAME} 2>/dev/null || true
done < $RENAME_CONTEXT_FILE

# Save the final config to user's kubeconfig
echo "Saving configuration to ~/.kube/config"
mkdir -p ~/.kube
KUBECONFIG=$KUBE_CONFIG_FILE kubectl config view --flatten > ~/.kube/config

# Clean up temporary files
rm -f $CLUSTER_REGION_FILE $RENAME_CONTEXT_FILE

echo "Setup complete. Use 'kubectl config get-contexts' to see available contexts."
echo "Use 'kubectl config use-context CONTEXT_NAME' to switch between contexts."